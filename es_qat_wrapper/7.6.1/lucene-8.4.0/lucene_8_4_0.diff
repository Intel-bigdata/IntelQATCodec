diff --git a/lucene/build.xml b/lucene/build.xml
index e3cf905c97..01c6fa942d 100644
--- a/lucene/build.xml
+++ b/lucene/build.xml
@@ -75,6 +75,9 @@
   <target name="compile" depends="init,compile-lucene-core,compile-codecs"
           description="Compiles core, codecs, and all modules">
     <modules-crawl target="compile-core"/>
+    <copy todir="build">
+      <fileset dir="lib/"/>
+    </copy>
   </target>
 
   <!-- Validation (license/notice/api checks). -->
diff --git a/lucene/core/build.xml b/lucene/core/build.xml
index a6302728c1..495657a7da 100644
--- a/lucene/core/build.xml
+++ b/lucene/core/build.xml
@@ -29,7 +29,10 @@
   <property name="moman.commit-hash" value="5c5c2a1e4dea" />
   <property name="moman.url" value="https://bitbucket.org/jpbarrette/moman/get/${moman.commit-hash}.zip" />
 
-  <path id="classpath"/>
+  <path id="classpath">
+    <pathelement location="../lib/lucene_qat_wrapper-1.0.0.jar/"/>
+    <pathelement location="../lib/"/>
+  </path>
   
   <!-- if we run with Java 9+, we refer to the java9 classes directory and insert this before the main classpath (to "emulate" a MR-JAR): -->
   <condition property="-test.classpath.java9.addon" value="${build.dir}/classes/java9" else="${build.dir}/classes/java">
@@ -43,6 +46,7 @@
     <pathelement location="${common.dir}/build/codecs/classes/java"/>
     <pathelement location="${common.dir}/build/test-framework/classes/java"/>
     <path refid="junit-path"/>
+    <path refid="classpath"/>
     <pathelement location="${-test.classpath.java9.addon}"/><!-- if it's a duplicate it gets removed by Ant! -->
     <pathelement location="${build.dir}/classes/java"/>
     <pathelement location="${build.dir}/classes/test"/>
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.java b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.java
index 53a84cbdd5..7ca534d1d2 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.java
@@ -28,6 +28,9 @@ import org.apache.lucene.store.DataOutput;
 import org.apache.lucene.util.ArrayUtil;
 import org.apache.lucene.util.BytesRef;
 
+import com.intel.qat.jni.QatCompressorJNI;
+import com.intel.qat.jni.QatDecompressorJNI;
+
 /**
  * A compression mode. Tells how much effort should be spent on compression and
  * decompression of stored fields.
@@ -113,6 +116,27 @@ public abstract class CompressionMode {
 
   };
 
+  /**
+   * This compression mode is using the QAT
+   */
+  public static final CompressionMode QAT = new CompressionMode() {
+
+    @Override
+    public Compressor newCompressor() {
+      return new QatCompressor();
+    }
+
+    @Override
+    public Decompressor newDecompressor() {
+      return new QatDecompressor();
+    }
+
+    @Override
+    public String toString() {
+      return "QAT";
+    }
+  };
+
   /** Sole constructor. */
   protected CompressionMode() {}
 
@@ -296,4 +320,95 @@ public abstract class CompressionMode {
 
   }
 
+  private static final class QatDecompressor extends Decompressor {
+
+    byte[] compressed;
+
+    QatDecompressor() {
+      compressed = new byte[0];
+    }
+
+    @Override
+    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {
+      assert offset + length <= originalLength;
+      if (length == 0) {
+        bytes.length = 0;
+        return;
+      }
+      final int compressedLength = in.readVInt();
+      compressed = new byte[compressedLength];
+      in.readBytes(compressed, 0, compressedLength);
+
+      final QatDecompressorJNI decompressor = new QatDecompressorJNI();
+
+      try {
+        decompressor.setInput(compressed, 0, compressedLength);
+        bytes.offset = bytes.length = 0;
+        bytes.bytes = ArrayUtil.grow(bytes.bytes, originalLength);
+        try {
+          bytes.length = decompressor.decompress(bytes.bytes, bytes.length, originalLength);
+        } catch (Error e) {
+          throw new Error(e);
+        }
+
+        if (!decompressor.finished()) {
+          throw new CorruptIndexException("Invalid decoder state in QAT decompressor: needsInput=" + decompressor.needsInput()
+                  + ", needsDict=" + decompressor.needsDictionary(), in);
+        }
+      } finally {
+        decompressor.end();
+      }
+      if (bytes.length != originalLength) {
+        throw new CorruptIndexException("Lengths mismatch in QAT decompressor: " + bytes.length + " != " + originalLength, in);
+      }
+      bytes.offset = offset;
+      bytes.length = length;
+    }
+
+    @Override
+    public Decompressor clone() {
+      return new QatDecompressor();
+    }
+  }
+
+  private static class QatCompressor extends Compressor {
+
+    final QatCompressorJNI compressor;
+    byte[] compressed;
+    boolean closed;
+
+    QatCompressor() {
+      compressor = new QatCompressorJNI();
+      compressed = new byte[64];
+    }
+
+    @Override
+    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {
+      compressor.reset();
+      compressor.setInput(bytes, off, len);
+      compressor.finish();
+
+      int totalCount = 0;
+      while (!compressor.finished() ) {
+        final int count = compressor.compress(compressed, totalCount, compressed.length - totalCount);
+        totalCount += count;
+        assert totalCount <= compressed.length;
+        if (compressor.finished()) {
+          break;
+        } else {
+          compressed = ArrayUtil.grow(compressed);
+        }
+      }
+      out.writeVInt(totalCount);
+      out.writeBytes(compressed, totalCount);
+    }
+
+    @Override
+    public void close() throws IOException {
+      if (closed == false) {
+        compressor.end();
+        closed = true;
+      }
+    }
+  }
 }
diff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java
index fdfba5b767..9232951d58 100644
--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java
+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.java
@@ -145,7 +145,9 @@ public final class Lucene50StoredFieldsFormat extends StoredFieldsFormat {
     /** Trade compression ratio for retrieval speed. */
     BEST_SPEED,
     /** Trade retrieval speed for compression ratio. */
-    BEST_COMPRESSION
+    BEST_COMPRESSION,
+    /** QAT */
+    QAT
   }
   
   /** Attribute key for compression mode. */
@@ -189,6 +191,8 @@ public final class Lucene50StoredFieldsFormat extends StoredFieldsFormat {
         return new CompressingStoredFieldsFormat("Lucene50StoredFieldsFast", CompressionMode.FAST, 1 << 14, 128, 1024);
       case BEST_COMPRESSION: 
         return new CompressingStoredFieldsFormat("Lucene50StoredFieldsHigh", CompressionMode.HIGH_COMPRESSION, 61440, 512, 1024);
+      case QAT:
+        return new CompressingStoredFieldsFormat("Lucene50StoredFieldsQAT", CompressionMode.QAT, 61440, 512, 1024);
       default: throw new AssertionError();
     }
   }
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestQatCompressionDecompressionMode.java b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestQatCompressionDecompressionMode.java
new file mode 100644
index 0000000000..9bacf20caa
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/codecs/compressing/TestQatCompressionDecompressionMode.java
@@ -0,0 +1,26 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.codecs.compressing;
+
+public class TestQatCompressionDecompressionMode extends AbstractTestCompressionMode {
+  @Override
+  public void setUp() throws Exception {
+    super.setUp();
+    mode = CompressionMode.QAT;
+  }
+}
diff --git a/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatQatCompression.java b/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatQatCompression.java
new file mode 100644
index 0000000000..d18d93cc20
--- /dev/null
+++ b/lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatQatCompression.java
@@ -0,0 +1,81 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.codecs.lucene50;
+
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.Mode;
+import org.apache.lucene.codecs.lucene84.Lucene84Codec;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.StoredField;
+import org.apache.lucene.index.BaseStoredFieldsFormatTestCase;
+import org.apache.lucene.index.DirectoryReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.store.Directory;
+
+import com.carrotsearch.randomizedtesting.generators.RandomPicks;
+
+public class TestLucene50StoredFieldsFormatQatCompression extends BaseStoredFieldsFormatTestCase {
+    @Override
+    protected Codec getCodec() {
+        return new Lucene84Codec(Mode.QAT);
+    }
+
+    /**
+     * Change compression params (leaving it the same for old segments)
+     * and tests that nothing breaks.
+     */
+    public void testMixedCompressions() throws Exception {
+        Directory dir = newDirectory();
+        for (int i = 0; i < 10; i++) {
+            IndexWriterConfig iwc = newIndexWriterConfig();
+            iwc.setCodec(new Lucene84Codec(RandomPicks.randomFrom(random(), Mode.values())));
+            IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());
+            Document doc = new Document();
+            doc.add(new StoredField("field1", "value1"));
+            doc.add(new StoredField("field2", "value2"));
+            iw.addDocument(doc);
+            if (random().nextInt(4) == 0) {
+                iw.forceMerge(1);
+            }
+            iw.commit();
+            iw.close();
+        }
+
+        DirectoryReader ir = DirectoryReader.open(dir);
+        assertEquals(10, ir.numDocs());
+        for (int i = 0; i < 10; i++) {
+            Document doc = ir.document(i);
+            assertEquals("value1", doc.get("field1"));
+            assertEquals("value2", doc.get("field2"));
+        }
+        ir.close();
+        // checkindex
+        dir.close();
+    }
+
+    public void testInvalidOptions() {
+        expectThrows(NullPointerException.class, () -> {
+            new Lucene84Codec(null);
+        });
+
+        expectThrows(NullPointerException.class, () -> {
+            new Lucene50StoredFieldsFormat(null);
+        });
+    }
+}
\ No newline at end of file
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
index 4fd5e16cef..3c79716c1f 100644
--- a/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec.java
@@ -36,7 +36,7 @@ public abstract class CompressingCodec extends FilterCodec {
    * Create a random instance.
    */
   public static CompressingCodec randomInstance(Random random, int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockSize) {
-    switch (random.nextInt(4)) {
+    switch (random.nextInt(6)) {
     case 0:
       return new FastCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);
     case 1:
@@ -45,6 +45,10 @@ public abstract class CompressingCodec extends FilterCodec {
       return new HighCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);
     case 3:
       return new DummyCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);
+    case 4:
+      return new QatCompressionCompressingCodec(chunkSize, maxDocsPerChunk, withSegmentSuffix, blockSize);
+    case 5:
+      return new QatCompressionCompressingCodec();
     default:
       throw new AssertionError();
     }
diff --git a/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/QatCompressionCompressingCodec.java b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/QatCompressionCompressingCodec.java
new file mode 100644
index 0000000000..4ff32e682b
--- /dev/null
+++ b/lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/QatCompressionCompressingCodec.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.codecs.compressing;
+
+/** CompressionCodec that uses {@link CompressionMode#QAT} */
+public class QatCompressionCompressingCodec extends CompressingCodec {
+
+    /** Constructor that allows to configure the chunk size. */
+    public QatCompressionCompressingCodec(int chunkSize, int maxDocsPerChunk, boolean withSegmentSuffix, int blockSize) {
+        super("QatCompressionCompressingStoredFields",
+                withSegmentSuffix ? "QatCompressionCompressingStoredFields" : "",
+                CompressionMode.QAT, chunkSize, maxDocsPerChunk, blockSize);
+    }
+
+    /** Default constructor. */
+    public QatCompressionCompressingCodec() {
+        // we don't worry about zlib block overhead as it's
+        // not bad and try to save space instead:
+        this(60*1024, 512, false, 1024);
+    }
+}
diff --git a/lucene/test-framework/src/resources/META-INF/services/org.apache.lucene.codecs.Codec b/lucene/test-framework/src/resources/META-INF/services/org.apache.lucene.codecs.Codec
index 282f5dd20c..292c393196 100644
--- a/lucene/test-framework/src/resources/META-INF/services/org.apache.lucene.codecs.Codec
+++ b/lucene/test-framework/src/resources/META-INF/services/org.apache.lucene.codecs.Codec
@@ -19,3 +19,4 @@ org.apache.lucene.codecs.compressing.FastCompressingCodec
 org.apache.lucene.codecs.compressing.FastDecompressionCompressingCodec
 org.apache.lucene.codecs.compressing.HighCompressionCompressingCodec
 org.apache.lucene.codecs.compressing.dummy.DummyCompressingCodec
+org.apache.lucene.codecs.compressing.QatCompressionCompressingCodec
diff --git a/lucene/tools/build.xml b/lucene/tools/build.xml
index b245dce2e9..330fdeaaf8 100644
--- a/lucene/tools/build.xml
+++ b/lucene/tools/build.xml
@@ -29,9 +29,12 @@
   <path id="classpath">
     <!-- TODO: we need this for forbidden-apis to be happy, because it does not support "includeantruntime": -->
     <fileset dir="lib"/>
+    <pathelement location="../lib/"/>
   </path>
 
-  <path id="test.classpath"/>
+  <path id="test.classpath">
+    <pathelement location="../lib/"/>
+  </path>
 
   <!-- redefine the test compilation, -test and -check-totals, so these are just no-ops -->
   <target name="compile-test"/>
diff --git a/lucene/tools/junit4/tests.policy b/lucene/tools/junit4/tests.policy
index 74949813b7..c31be9867c 100644
--- a/lucene/tools/junit4/tests.policy
+++ b/lucene/tools/junit4/tests.policy
@@ -28,6 +28,12 @@ grant {
   // should be enclosed within common.dir, but just in case:
   permission java.io.FilePermission "${junit4.childvm.cwd}", "read";
 
+  // the system files
+  permission java.io.FilePermission "/lib64", "read,execute";
+  permission java.io.FilePermission "/lib", "read,execute";
+  permission java.io.FilePermission "/*", "read,write,execute";
+  permission java.lang.RuntimePermission "loadLibrary.*";
+
   // write only to sandbox
   permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp", "read,write,delete";
   permission java.io.FilePermission "${junit4.childvm.cwd}${/}temp${/}-", "read,write,delete";
@@ -70,6 +76,7 @@ grant {
   permission java.lang.RuntimePermission "getenv.*";
   permission java.lang.RuntimePermission "getClassLoader";
   permission java.lang.RuntimePermission "setContextClassLoader";
+  permission java.lang.RuntimePermission "*";
 
   // read access to all system properties:
   permission java.util.PropertyPermission "*", "read";

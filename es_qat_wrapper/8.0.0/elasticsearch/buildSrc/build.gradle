/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import org.gradle.util.GradleVersion

import java.util.regex.Matcher

plugins {
  id 'java-gradle-plugin'
  id 'groovy'
}

group = 'org.elasticsearch.gradle'

String minimumGradleVersion = file('src/main/resources/minimumGradleVersion').text.trim()
if (GradleVersion.current() < GradleVersion.version(minimumGradleVersion)) {
    throw new GradleException("Gradle ${minimumGradleVersion}+ is required to build elasticsearch")
}

if (project == rootProject) {
  // change the build dir used during build init, so that doing a clean
  // won't wipe out the buildscript jar
  buildDir = 'build-bootstrap'
}

/*****************************************************************************
 *         Propagating version.properties to the rest of the build           *
 *****************************************************************************/

// we update the version property to reflect if we are building a snapshot or a release build
// we write this back out below to load it in the Build.java which will be shown in rest main action
// to indicate this being a snapshot build or a release build.
Properties props = VersionPropertiesLoader.loadBuildSrcVersion(project.file('version.properties'))
version = props.getProperty("elasticsearch")

task generateVersionProperties(type: WriteProperties) {
  outputFile = "${buildDir}/version.properties"
  comment = 'Generated version properties'
  properties(props)
}

processResources {
  from(generateVersionProperties)
}

/*****************************************************************************
 *         Java version                                                      *
 *****************************************************************************/

if (JavaVersion.current() < JavaVersion.VERSION_11) {
  throw new GradleException('At least Java 11 is required to build elasticsearch gradle tools')
}

allprojects {
  targetCompatibility = '11'
  sourceCompatibility = '11'
}

sourceSets {
    // We have a few classes that need to be compiled for older java versions
    minimumRuntime { }
}

configurations {
  reaper
}

compileMinimumRuntimeJava {
    targetCompatibility = 8
    sourceCompatibility = 8
}

jar {
    from sourceSets.minimumRuntime.output
    into('META-INF') {
        from configurations.reaper
    }
}

javadoc {
    source sourceSets.minimumRuntime.allSource
}

/*****************************************************************************
 *                    Dependencies used by the entire build                  *
 *****************************************************************************/

repositories {
  jcenter()
}

dependencies {
  if (project.ext.has("isEclipse") == false || project.ext.isEclipse == false) {
    // eclipse is confused if this is set explicitly
    compile sourceSets.minimumRuntime.output
  }

  compile localGroovy()
  
  compile 'commons-codec:commons-codec:1.12'

  //compile 'com.intel.qat:es_qat_wrapper:1.0.0'
   compile fileTree(dir:'libs',includes:['*jar'])
   testCompile fileTree(dir:'libs',includes:['*jar'])

  compile 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
  compile 'com.netflix.nebula:nebula-publishing-plugin:4.4.4'
  compile 'com.netflix.nebula:gradle-info-plugin:3.0.3'
  compile 'org.eclipse.jgit:org.eclipse.jgit:3.2.0.201312181205-r'
  compile 'com.perforce:p4java:2012.3.551082' // THIS IS SUPPOSED TO BE OPTIONAL IN THE FUTURE....
  compile 'org.apache.rat:apache-rat:0.11'
  compile "org.elasticsearch:jna:4.5.1"
  compile 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
  compile 'de.thetaphi:forbiddenapis:2.6'
  compile 'com.avast.gradle:gradle-docker-compose-plugin:0.8.12'
  testCompile "junit:junit:${props.getProperty('junit')}"
  testCompile "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${props.getProperty('randomizedrunner')}"
  testCompile 'com.github.tomakehurst:wiremock-jre8-standalone:2.23.2'
  reaper project('reaper')
  minimumRuntimeCompile "junit:junit:${props.getProperty('junit')}"
  minimumRuntimeCompile localGroovy()
  minimumRuntimeCompile gradleApi()
}

/*****************************************************************************
 *                         Bootstrap repositories                            *
 *****************************************************************************/
// this will only happen when buildSrc is built on its own during build init
if (project == rootProject) {
  repositories {
    if (System.getProperty("repos.mavenLocal") != null) {
      mavenLocal()
    }
  }
  // only run tests as build-tools
  test.enabled = false
}

/*****************************************************************************
 *                           Normal project checks                           *
 *****************************************************************************/

// this happens when included as a normal project in the build, which we do
// to enforce precommit checks like forbidden apis, as well as setup publishing
if (project != rootProject) {
  apply plugin: 'elasticsearch.build'
  apply plugin: 'nebula.maven-base-publish'
  apply plugin: 'nebula.maven-scm'

  // groovydoc succeeds, but has some weird internal exception...
  groovydoc.enabled = false

  // build-tools is not ready for primetime with these...
  dependencyLicenses.enabled = false
  dependenciesInfo.enabled = false
  forbiddenApisMain.enabled = false
  forbiddenApisMinimumRuntime.enabled = false
  forbiddenApisTest.enabled = false
  jarHell.enabled = false
  thirdPartyAudit.enabled = false

  configurations {
    distribution
  }

  dependencies {
    distribution project(':distribution:archives:windows-zip')
    distribution project(':distribution:archives:oss-windows-zip')
    distribution project(':distribution:archives:darwin-tar')
    distribution project(':distribution:archives:oss-darwin-tar')
    distribution project(':distribution:archives:linux-tar')
    distribution project(':distribution:archives:oss-linux-tar')
  }
    
  // for external projects we want to remove the marker file indicating we are running the Elasticsearch project
  processResources {
      exclude 'buildSrc.marker'
  }

  String localDownloads = "${rootProject.buildDir}/local-downloads"
  task setupLocalDownloads(type:Copy) {
    from configurations.distribution
    into localDownloads
  }
    
  task integTest(type: Test) {
    // integration test requires the local testing repo for example plugin builds
    dependsOn project.rootProject.allprojects.collect {
      it.tasks.matching { it.name == 'publishNebulaPublicationToTestRepository'}
    }
    dependsOn setupLocalDownloads
    exclude "**/*Tests.class"
    inputs.dir(file("src/testKit"))
    // tell BuildExamplePluginsIT where to find the example plugins
    systemProperty (
            'test.build-tools.plugin.examples',
            files(
                    project(':example-plugins').subprojects.collect { it.projectDir }
            ).asPath,
    )
    systemProperty 'test.local-test-repo-path', "${rootProject.buildDir}/local-test-repo"
    systemProperty 'test.local-test-downloads-path', localDownloads
    systemProperty 'test.version_under_test', version
    Matcher isLuceneSnapshot = (/\w+-snapshot-([a-z0-9]+)/ =~ versions.lucene)
    if (isLuceneSnapshot) {
      systemProperty 'test.lucene-snapshot-revision', isLuceneSnapshot[0][1]
    }
    maxParallelForks System.getProperty('tests.jvms', project.rootProject.ext.defaultParallel.toString()) as Integer
    // These tests run Gradle which doesn't have FIPS support
    onlyIf { project.inFipsJvm == false }
  }
  check.dependsOn(integTest)

  // TODO: re-enable once randomizedtesting gradle code is published and removed from here
  licenseHeaders.enabled = false

  forbiddenPatterns {
    exclude '**/*.wav'
    exclude '**/*.p12'
    // the file that actually defines nocommit
    exclude '**/ForbiddenPatternsTask.java'
  }

  testingConventions {
    naming.clear()
    naming {
      Tests {
        baseClass 'org.elasticsearch.gradle.test.GradleUnitTestCase'
      }
      IT {
        baseClass 'org.elasticsearch.gradle.test.GradleIntegrationTestCase'
      }
    }
  }

  /*
   * We alread configure publication and we don't need or want this one that
   * comes from the java-gradle-plugin.
   */
  afterEvaluate {
    generatePomFileForPluginMavenPublication.enabled = false
  }
}

// Define this here because we need it early.
class VersionPropertiesLoader {
  static Properties loadBuildSrcVersion(File input) throws IOException {
    Properties props = new Properties();
    InputStream is = new FileInputStream(input)
    try {
      props.load(is)
    } finally {
      is.close()
    }
    loadBuildSrcVersion(props, System.getProperties())
    return props
  }

  protected static void loadBuildSrcVersion(Properties loadedProps, Properties systemProperties) {
    String elasticsearch = loadedProps.getProperty("elasticsearch")
    if (elasticsearch == null) {
      throw new IllegalStateException("Elasticsearch version is missing from properties.")
    }
    if (elasticsearch.matches("[0-9]+\\.[0-9]+\\.[0-9]+") == false) {
      throw new IllegalStateException(
              "Expected elasticsearch version to be numbers only of the form  X.Y.Z but it was: " +
                      elasticsearch
      )
    }
    String qualifier = systemProperties.getProperty("build.version_qualifier", "");
    if (qualifier.isEmpty() == false) {
      if (qualifier.matches("(alpha|beta|rc)\\d+") == false) {
        throw new IllegalStateException("Invalid qualifier: " + qualifier)
      }
      elasticsearch += "-" + qualifier
    }
    if ("true".equals(systemProperties.getProperty("build.snapshot", "true"))) {
      elasticsearch += "-SNAPSHOT"
    }
    loadedProps.put("elasticsearch", elasticsearch)
  }
}
